const [email] = useState('');
  const [password] = useState('');
  const [confirmPassword] = useState('');




  const  navigate = useNavigate()
  const [user, setUser] = useState({
    email: "",
    password: "",
    confirmPassword: ""
  });

  let name, value;
  const handleInputs = (e) => {
      console.log(e);
      name = e.target.name;
      value = e.target.value;

      setUser({
       ...user,
        [name]: value
      });
  }
  
  const PostData = async(e) =>{
    e.preventDefault();

    const { email, password, confirmPassword} = user;

    const res = await fetch('http://localhost:4000/', {
      method: "POST",
      headers:{
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        "email": email,
        "password":  password,
        "confirmPassword":  confirmPassword
      
      })

     })

  //   const data = await res.json();
  //   if(data.status===422 || !data ){
  //     window.alert("Invalid credentials")
  //     console.log("Invalid credentials")
  //   }else{
  //     console.log(data)
  //     window.alert("Account Created Successfully!")
  //     console.log("Account Created Successfully!")

  //     navigate.pushState("/login")
  //   }
   }

  const validateForm = () => {
    if (email === "") {
      alert("Email must be filled out");
      return false;
    }



    2)
    login={this.loginHandler} status={this.state.auth}

------------------------------------------------------
    app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (user && await bcrypt.compare(password, user.password)) {
      const token = jwt.sign({ username: user.username }, secret, { expiresIn: '1h' });
      res.json({ token });
    } else {
      res.status(401).send('Invalid credentials');
    }
  } catch (err) {
    res.status(500).json({ error: err.message });
  }